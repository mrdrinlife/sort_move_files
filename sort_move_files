import time
import datetime
import json
import os
import shutil

class Work_table_leaner:

    # on first start create folder and dump with files list
    def create_exceptiom_list(self, work_directory, move_derectory):
        if not os.path.exists(move_derectory + 'exception_list.txt'):
            if not os.path.isdir(move_derectory):
                os.mkdir(move_derectory)
            with open(move_derectory + 'exception_list.txt', 'a') as dump_file:
                print('create dump')
                json.dump(self.find_files(work_directory), dump_file)
        with open(move_derectory + 'exception_list.txt', 'r') as file:
            print('exception list return')
            return json.load(file)

    # create files list in derectory
    def find_files(self, work_directory):
        find_file_list = []
        for address, folder, files in os.walk(work_directory):
            for file in files:
                temp=(os.path.join(address, file)).replace('\\', '/')
                find_file_list.append(temp)
        print('file list create', find_file_list)
        return find_file_list

    # filtred list on non mover files
    def filtre(self, work_file_list, filtre_list, day_not_move):
        for i in filtre_list:
            if i in work_file_list.copy():
                work_file_list.pop(work_file_list.index(i))
        for i in work_file_list.copy():
            file_not_move = (time.time() - os.path.getmtime(i)) // (86400)
            if file_not_move < day_not_move:
                work_file_list.pop(work_file_list.index(i))
        print('work list was filtred', work_file_list)
        return work_file_list

    def create_main_folder (self, move_directory, work_file_list):
        today = datetime.date.today()
        today_date = today.strftime("%d_%m_%Y")  # dd_mm_YY
        move_directory = move_directory + today_date
        if work_file_list and not os.path.exists(move_directory):
            os.mkdir(move_directory)
        print('main folder create', move_directory)
        return move_directory

    def create_format_folder (self, move_directory, format):
        format_folder = move_directory+'/'+format
        print(format_folder)
        if not os.path.exists(format_folder):
            os.mkdir(format_folder)
            print('format folder create')
        return format_folder

    def move_file(self, work_file_list, move_directory):
        for file_directory in work_file_list:
            format = file_directory.split('.')[-1]
            format_folder = self.create_format_folder(move_directory, format)
            numb = 1
            try:
                shutil.move(file_directory, format_folder)
            except:
                while True:
                    new_name = file_directory[::-1].split('/', 1)[::-1]
                    new_name = [i[::-1] for i in new_name]
                    if new_name[1][1] == ' ':
                        new_name = (new_name[0] + '/' + str(numb) + ' ' + new_name[1][2:])
                    else:
                        new_name = (new_name[0]+'/'+str(numb)+' '+new_name[1][0:])
                    numb += 1
                    try:
                        os.rename(file_directory, new_name)
                    except:
                        continue
                    file_directory = new_name
                    print(file_directory)
                    try:
                        shutil.move(file_directory, format_folder)
                        break
                    except:
                        continue

    def del_empty_folders(self, work_directory):
        for d in os.listdir(work_directory):
            a = os.path.join(work_directory, d)
            if os.path.isdir(a):
                self.del_empty_folders(a)
                if not os.listdir(a):
                    os.rmdir(a)

    def arhivate_old(self, move_directory, day_not_move=7):
        folder_list = [move_directory+i for i in os.listdir(move_directory) if i.find('_')==2]
        if not os.path.isdir(move_directory+'archive/'):
            os.mkdir(move_directory+'archive/')
        for i in folder_list:
            if ((time.time() - os.stat(i).st_mtime) // (3600 * 24)) > day_not_move:
                name=move_directory+'archive/'+i[-10:]+'.zip'
                shutil.make_archive(name, 'zip', i)
                shutil.rmtree(i, ignore_errors=True)




work_directory = (r'C:/Users/vmuser006/Desktop/')
move_directory = (r'D:/temple/')
arhive_directory = (r'D:/temple/')

file_mover = Work_table_leaner()
#on first start create exception_list.txt witch important files
filtre_list = file_mover.create_exceptiom_list(work_directory, move_directory)
#find all files in directory
work_file_list = file_mover.find_files(work_directory)

#sortet important files from trash. Return filtred list
work_file_list = file_mover.filtre(work_file_list, filtre_list, 7)

#create main folder
move_directory = file_mover.create_main_folder(move_directory, work_file_list)

# move file
file_mover.move_file(work_file_list, move_directory)

# delet emty folder in work directory
file_mover.del_empty_folders(work_directory)

# arhive folder old folder directory
file_mover.arhivate_old(arhive_directory, 7)
