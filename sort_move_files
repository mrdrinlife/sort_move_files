import json
import os
import shutil
import time
import datetime

def work_list(work_directory, temple_directory):
    today = datetime.date.today()
    today_date = today.strftime("%d_%m_%Y")
    format_directory_transfer = []
    for top, dirs, files in os.walk(work_directory):
        for nm in files:
            file_list = []
            #add file forat in list
            file_format = os.path.splitext(os.path.join(top, nm))[1]
            file_list.append(file_format)
            #add derestory where file
            file_work_directory = (os.path.splitext(os.path.join(top, nm))[0] + file_format)
            file_list.append(file_work_directory)
            # add derestory where file will move
            file_temple_directory = (temple_directory + today_date + '/' + file_format)
            file_list.append(file_temple_directory)
            # add name file list
            same_fale_list = os.path.split(nm)[1]
            file_list.append(same_fale_list)
            # add lists in big list
            format_directory_transfer.append(file_list)
    return format_directory_transfer

def filtre_list(temple_directory, format_directory_transfer):
    while True:
        if os.path.exists(temple_directory + 'exception_list.txt'):
            with open(temple_directory + 'exception_list.txt', 'r') as file:
                files_list = json.load(file)
            for i in files_list:
                index = format_directory_transfer.index(i)
                format_directory_transfer.pop(index)
            break
        else:
            with open(temple_directory + 'exception_list.txt', 'a') as file:
                json.dump(format_directory_transfer, file)

    return format_directory_transfer

def rename_same_files (filtred_list):
    same_file_number = 1
    rename_number=1
    for i in filtred_list:
        x = same_file_number
        while x < len(filtred_list):
            if i[3] == filtred_list[x][3]:
                #rename file in file list
                rename_file = os.path.splitext(i[3])[0] + '_[' + str(rename_number) + ']'+os.path.splitext(i[3])[1]
                filtred_list[same_file_number-1][3] = rename_file
                #rename file in directory
                rename_directory_file = os.path.splitext(i[1])[0] + '_[' + str(rename_number) + ']'+os.path.splitext(i[1])[1]
                os.rename(i[1], rename_directory_file)
                filtred_list[same_file_number - 1][1] = rename_directory_file
                rename_number += 1
            else:
                x += 1
        same_file_number += 1
    return filtred_list

def create_new_folders(temple_directory, format_directory_transfer):
    today = datetime.date.today()
    today_date = today.strftime("%d_%m_%Y")  # dd/mm/YY
    try:
        os.mkdir(temple_directory + today_date)
    except:
        print("Folder with the same date name already exists")
    formats = set()
    for i in format_directory_transfer:
        file_time = os.path.getmtime(i[1])
        system_time = time.time()
        file_not_move = (system_time - file_time) // (3600 * 24)
        if file_not_move > 1:
            try:
                os.mkdir(temple_directory + today_date + '/' + i[0])
            except:
                print("Format folder with the same name already exists")

def move_files(format_directory_transfer):
    for i in format_directory_transfer:
        file_time = os.path.getatime(i[1])
        system_time = time.time()
        file_not_move = (system_time - file_time) // (3600 * 24)
        if file_not_move > 1:
            try:
                shutil.move(i[1], i[2])
            except:
                print('file export error')
        else:
            continue

def del_empty_folders(work_directory):
    for d in os.listdir(work_directory):
        a = os.path.join(work_directory, d)
        if os.path.isdir(a):
            del_empty_folders(a)
            if not os.listdir(a):
                os.rmdir(a)

temple_directory = ('D:/temple/')
work_directory = ('D:/test/')

create_files_matrix = work_list(work_directory, temple_directory)
dell_exceptions_file = filtre_list(temple_directory,create_files_matrix)
rename_same_files = rename_same_files(dell_exceptions_file)
create_new_folders(temple_directory, rename_same_files)
move_files(rename_same_files)
del_empty_folders(work_directory)
